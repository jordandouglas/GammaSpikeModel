<!-- Build gammaspike. It is also used by Hudson gammaspike project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_gammaspike" name="BUILD_gammaspike">
	<description>
	    Build gammaspike.
	    JUnit test is available for this build.
	    $Id: build_gammaspike.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="gammaspikedir" value="../GammaSpikeModel/" />
	<property name="srcgammaspike" location="src" />
	<property name="docgammaspike" location="doc" />
	<property name="buildgammaspike" location="build" />
	<property name="libgammaspike" location="lib" />
	<property name="release_dir" value="release" />
	<property name="distgammaspike" location="${buildgammaspike}/dist" />
	<property name="beast2path" location="../beast2"/>
	<property name="libBeast2" location="${beast2path}/lib" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
	<property name="Add_on_dir" value="${release_dir}/add-on" />

    <import file="${beast2path}/build.xml" />

	<property name="main_class_CladeAge" value="beast.app.ca.gammaspikePanel" />
	<property name="report" value="${buildgammaspike}/junitreport"/>

	<path id="classpath">
        <pathelement path="${buildgammaspike}"/>
		<fileset dir="${libBeast2}" includes="junit/junit-platform-console-standalone-1.8.2.jar"/>
		<fileset dir="${libBeast2}" includes="jam.jar"/>
		<fileset dir="${libBeast2}" includes="commons-math3-3.6.1.jar"/>
	<pathelement path="${beast2classpath}"/>
		<fileset dir="${beast2path}/lib" includes="jam.jar"/>
		<fileset dir="${beast2path}/lib" includes="beagle.jar"/>
		<fileset dir="${beast2path}/lib" includes="fest.jar"/>
		<fileset dir="${beast2path}/lib" includes="colt.jar"/>
	<pathelement path="../BeastFX/build"/>
	</path>




	<!-- start -->
	<target name="initgammaspike">
		<echo message="${ant.project.name}: ${ant.file}" />

	    <available file="${gammaspikedir}/version.xml" property="versionAvailable"/>
    	<fail unless="versionAvailable">
	      ** Required file version.xml does not exist. **
	    </fail>

	    <xmlproperty file="${gammaspikedir}/version.xml" prefix="fromVersionFile" />
        <property name="projName" value="${fromVersionFile.package(name)}" />
    	<property name="gammaspikeversion" value="${fromVersionFile.package(version)}" />
	</target>

	<target name="cleangammaspike">
    	<delete dir="${buildgammaspike}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_gammaspike" depends="cleangammaspike,compile-allgammaspike,junitgammaspike"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_gammaspike" depends="cleangammaspike,compile-allgammaspike,junitgammaspike,dist_all_gammaspike"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the gammaspike.jar and beauti.jar -->
	<target name="build_jar_all_gammaspike_NoJUnitTest" depends="cleangammaspike,compile-allgammaspike,dist_all_gammaspike"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allgammaspike" depends="initgammaspike,compile-all">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${buildgammaspike}" />

		<!-- Compile the java code from ${srcgammaspike} into ${buildgammaspike} /bin -->
		<javac srcdir="${srcgammaspike}" destdir="${buildgammaspike}" classpathref="classpath"
		       fork="true"
		       memoryinitialsize="256m"
		       memorymaximumsize="256m"
			   source="1.8"
		       target="1.8">
			<include name="**/**" />
			<!-- compile JUnit test classes -->
			<include name="test/beast/**" />
		</javac>
		<copy todir="${buildgammaspike}">
			<fileset dir="${srcgammaspike}" includes="**/*.png" />
		</copy>
		<echo message="Successfully compiled." />
	</target>

	<!-- make the beast.jar and beauti.jar -->
	<target name="dist_all_gammaspike" depends="compile-allgammaspike" description="create gammaspike jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distgammaspike}" />

		<!-- Put everything in ${buildgammaspike} into the beast.jar file -->
		<jar jarfile="${distgammaspike}/gammaspike.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main_class_CladeAge}" />
			</manifest>
			<fileset dir="${buildgammaspike}">
				<include name="**/*.class" />
				<include name="**/*.png" />
			</fileset>
			<fileset dir="${beast2classpath}">
				<include name="**/*.class" />
				<include name="**/*.properties" />
				<include name="**/*.png" />
			</fileset>
			<zipgroupfileset dir="${libBeast2}" includes="jam.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="beagle.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="colt.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="commons-math3-3.1.1.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="antlr-runtime-4.7.jar" />
		</jar>
		<jar jarfile="${distgammaspike}/gammaspike.src.jar">
			<fileset dir="${srcgammaspike}">
				<include name="**/*.java" />
				<include name="**/*.png" />
				<include name="**/*.xsl" />
			</fileset>
        </jar>
		<jar jarfile="${distgammaspike}/gammaspike.package.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildgammaspike}">
				<include name="**/*.png" />
				<include name="**/*.class" />
				<include name="**/*.class" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<!-- run beast.jar -->
	<target name="run_gammaspike">
		<java jar="${distgammaspike}/gammaspike.jar" fork="true" />
	</target>


	<!-- JUnit test -->
	<target name="junitgammaspike">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildgammaspike}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${srcgammaspike}">
                    <include name="test/**/*Test.java"/>
				</fileset>
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>

    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml"/>
			<report format="frames" todir="${report}"/>
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>


	<target name="package"
	        depends="build_jar_all_gammaspike_NoJUnitTest"
	        description="release BEAST 2 add-on version of gammaspike">

		<delete dir="${Add_on_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${Add_on_dir}" />
		<mkdir dir="${Add_on_dir}/lib" />
		<mkdir dir="${Add_on_dir}/doc" />
		<mkdir dir="${Add_on_dir}/examples" />

		<copy todir="${Add_on_dir}">
			<fileset file="version.xml"/>
		</copy>
		<copy todir="${Add_on_dir}/examples">
			<fileset dir="examples" />
		</copy>
		<!--
		<copy todir="${Add_on_dir}/doc">
			<fileset dir="doc" includes="gammaspike.pdf"/>
		</copy>
		-->
		<copy todir="${Add_on_dir}/lib">
			<fileset dir="${distgammaspike}" includes="gammaspike.package.jar" />
		</copy>
		<copy todir="${Add_on_dir}">
			<fileset dir="${distgammaspike}" includes="gammaspike.src.jar" />
		</copy>



		<jar jarfile="${distgammaspike}/gammaspike.package.v${gammaspikeversion}.zip">
			<fileset dir="${Add_on_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Add-on version v${gammaspikeversion} release is finished." />
	</target>





	<!-- Release -->
	<property name="version" value="0.0.1" />
	<property name="version_number" value="${gammaspikeversion}" />
	<property name="release_dirgammaspike" value="release" />
	<property name="copyright" value="CladeAge development team 2013" />

	<property name="CladeAge_name" value="CladeAge" />

	<property name="common_dirgammaspike" value="${release_dirgammaspike}/common" />
	<property name="Mac_dirgammaspike" value="${release_dirgammaspike}/Mac" />
	<property name="Linux_dirgammaspike" value="${release_dirgammaspike}/Linux" />
	<property name="Windows_dirgammaspike" value="${release_dirgammaspike}/Windows" />

	<property name="Mac_package_dirgammaspike" value="${Mac_dirgammaspike}/${CladeAge_name}" />
	<property name="Linux_package_dirgammaspike" value="${Linux_dirgammaspike}/${CladeAge_name}" />
	<property name="Windows_package_dirgammaspike" value="${Windows_dirgammaspike}/${CladeAge_name}" />

	<!-- Need to either install Launch4j under {CladeAge workspace}/${release}
                 or install it in the default directory and change the location of launch4j.dir -->
	<target name="windows"
	        depends="build_jar_all_gammaspike_NoJUnitTest"
	        description="release Windows version of CladeAge">

		<delete dir="${Windows_package_dirgammaspike}" />
		<!-- Create the release directory -->
		<mkdir dir="${Windows_package_dirgammaspike}" />

		<property name="launch4j.dir" location="../../launch4j" />
		<taskdef name="launch4j"
		         classname="net.sf.launch4j.ant.Launch4jTask"
		         classpath="${launch4j.dir}/launch4j.jar :${launch4j.dir}/lib/xstream.jar" />

		<copy file="${distgammaspike}/gammaspike.src.jar" todir="${Windows_package_dirgammaspike}/lib" />
		<copy file="${common_dirgammaspike}/VERSION HISTORY.txt" todir="${Windows_package_dirgammaspike}" />
		<copy file="${common_dirgammaspike}/README.txt" todir="${Windows_package_dirgammaspike}" />
		<copy file="${common_dirgammaspike}/LICENSE.txt" todir="${Windows_package_dirgammaspike}" />

		<!-- CladeAge v?.?.?.exe -->
		<launch4j configFile="${Windows_dirgammaspike}/CladeAge_launch4j.xml"
		          jar="${distgammaspike}/gammaspike.jar"
		          outfile="${Windows_package_dirgammaspike}/${CladeAge_name}.exe"
		          fileVersion="${version_number}.0"
		          txtFileVersion="${gammaspikeversion}"
		          productVersion="${version_number}.0"
		          txtProductVersion="${gammaspikeversion}" />


		<zip destfile="${Windows_dirgammaspike}/${CladeAge_name} v${gammaspikeversion}.zip">
			<zipfileset dir="${Windows_package_dirgammaspike}" prefix="${CladeAge_name}" />
		</zip>

		<echo message="Windows version release is finished." />
	</target>

	<target name="linux"
	        depends="build_jar_all_gammaspike_NoJUnitTest"
	        description="release Linux/Unix version of CladeAge">
		<delete dir="${Linux_package_dirgammaspike}" />
		<!-- Create the release directory -->
		<mkdir dir="${Linux_package_dirgammaspike}" />

		<copy todir="${Linux_package_dirgammaspike}/bin">
			<fileset dir="${Linux_dirgammaspike}/bin" />
		</copy>
		<chmod dir="${Linux_package_dirgammaspike}/bin" perm="755" includes="**/**" />

		<copy file="${distgammaspike}/gammaspike.jar" todir="${Linux_package_dirgammaspike}/lib" />
		<copy file="${distgammaspike}/gammaspike.src.jar" todir="${Linux_package_dirgammaspike}/lib" />
		<copy file="${common_dirgammaspike}/icons/gammaspike.png" todir="${Linux_package_dirgammaspike}/images" />

		<copy file="${common_dirgammaspike}/VERSION HISTORY.txt" todir="${Linux_package_dirgammaspike}" />
		<copy file="${common_dirgammaspike}/README.txt" todir="${Linux_package_dirgammaspike}" />
		<copy file="${common_dirgammaspike}/LICENSE.txt" todir="${Linux_package_dirgammaspike}" />

		<echo message="Have to tar manaully, because [ANT Bug 550] the tar task change the mode of the executables files." />
		<echo message="Linux/Unix version release is finished." />
	</target>

	<property name="jarbundler_dir" value="/Applications/eclipse/plugins/org.apache.ant_1.8.3.v201301120609/lib" />
	<target name="mac"
	        depends="build_jar_all_gammaspike_NoJUnitTest"
	        description="release Mac version of CladeAge">
		<delete dir="${Mac_package_dirgammaspike}" />
		<delete file="${Mac_dirgammaspike}/pack.temp.dmg"/>
		<delete file="${Mac_dirgammaspike}/CladeAge v${gammaspikeversion}.dmg"/>
		<!-- Create the release directory -->
		<mkdir dir="${Mac_package_dirgammaspike}" />

		<copy todir="${Mac_package_dirgammaspike}/bin">
			<fileset dir="${Linux_dirgammaspike}/bin" />
		</copy>
		<chmod dir="${Mac_package_dirgammaspike}/bin" perm="755" includes="**/**" />

		<copy file="${distgammaspike}/gammaspike.jar" todir="${Mac_package_dirgammaspike}/lib" />
		<copy file="${distgammaspike}/gammaspike.src.jar" todir="${Mac_package_dirgammaspike}/lib" />

		<copy file="${common_dirgammaspike}/VERSION HISTORY.txt" todir="${Mac_package_dirgammaspike}" />
		<copy file="${common_dirgammaspike}/README.txt" todir="${Mac_package_dirgammaspike}" />
		<copy file="${common_dirgammaspike}/LICENSE.txt" todir="${Mac_package_dirgammaspike}" />

		<taskdef name="jarbundler"
		         classname="net.sourceforge.jarbundler.JarBundler"
		         classpath="${jarbundler_dir}/jarbundler-2.2.0.jar" />

		<!-- create a jar bundle for the mac -->
		<jarbundler dir="${Mac_package_dirgammaspike}"
		            name="${CladeAge_name}"
		            mainclass="${main_class_CladeAge}"
		            icon="${common_dirgammaspike}/icons/gammaspike.icns"
		            jvmversion="1.8+"
		            vmoptions="-Xmx1024M"
		            arguments="-window -working -options"
		            version="${gammaspikeversion}"
		            infostring="${CladeAge_name}, ${copyright}"
		            bundleid="${main_class_CladeAge}">
			<jarfileset dir="${Mac_package_dirgammaspike}/lib">
				<include name="**/gammaspike.jar" />
			</jarfileset>
			<javaproperty name="apple.laf.useScreenMenuBar" value="true" />
			<javaproperty name="java.library.path" value="$JAVAROOT:/usr/local/lib" />
		</jarbundler>

		<echo message="Building disk image." />
		<exec executable='release/Mac/createdmg.sh'/>
		<echo message="Mac version release is finished." />
	</target>






	<condition property="isWindows"><os family="windows" /></condition>
	<condition property="isLinux"><and><os family="unix"/><not><os family="mac"/></not></and></condition>
	<condition property="isMac"><os family="mac" /></condition>

	<target name="installLinux" depends="package" if="isLinux">
	        <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
			<unzip src="${distgammaspike}/gammaspike.package.v${gammaspikeversion}.zip" dest="${user.home}/.beast/2.7/${projName}"/>
	</target>

	<target name="installMac" depends="package" if="isMac">
	        <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
			<unzip src="${distgammaspike}/gammaspike.package.v${gammaspikeversion}.zip" dest="${user.home}/Library/Application Support/BEAST/2.7/${projName}"/>
	</target>

	<target name="installWindows" depends="package" if="isWindows">
	        <mkdir dir="${user.home}/BEAST/2.7/${projName}"/>
			<unzip src="${distgammaspike}/gammaspike.package.v${gammaspikeversion}.zip" dest="${user.home}/BEAST/2.7/${projName}"/>
	</target>

	<target name="install" depends="installWindows,installMac,installLinux">
	</target>


</project>
